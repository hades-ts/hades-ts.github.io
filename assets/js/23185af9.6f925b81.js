"use strict";(self.webpackChunk_hades_ts_docs=self.webpackChunk_hades_ts_docs||[]).push([[290],{158:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>k});var a=t(6393);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),m=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=m(e.components);return a.createElement(o.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=m(t),c=r,k=u["".concat(o,".").concat(c)]||u[c]||d[c]||i;return t?a.createElement(k,l(l({ref:n},p),{},{components:t})):a.createElement(k,l({ref:n},p))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=c;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[u]="string"==typeof e?e:r,l[1]=s;for(var m=2;m<i;m++)l[m]=t[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},9839:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var a=t(9629),r=(t(6393),t(158));t(4532);const i={},l="Text Commands",s={unversionedId:"index",id:"index",title:"Text Commands",description:'Hades has support for traditional "text-based parser commands".',source:"@site/docs/text-commands/index.md",sourceDirName:".",slug:"/",permalink:"/docs/text-commands/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"text-commands"},o={},m=[{value:"Installing Text Command Support",id:"installing-text-command-support",level:2},{value:"Using the <code>TextCommandService</code>",id:"using-the-textcommandservice",level:2},{value:"Writing Commands",id:"writing-commands",level:2},{value:"The Command Context",id:"the-command-context",level:2},{value:"Arguments",id:"arguments",level:2},{value:"Argument Parsers",id:"argument-parsers",level:3},{value:"Manually Parsing Arguments",id:"manually-parsing-arguments",level:3},{value:"Argument Validation",id:"argument-validation",level:3}],p={toc:m};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"text-commands"},"Text Commands"),(0,r.kt)("p",null,'Hades has support for traditional "text-based parser commands".'),(0,r.kt)("p",null,'This kind of command was typical before Discord\'s "Slash Commands".'),(0,r.kt)("p",null,"Text command support is located in the ",(0,r.kt)("inlineCode",{parentName:"p"},"@hades-ts/text-commands")," package."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Table of Contents"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#text-commands"},"Text Commands"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#installing-text-command-support"},"Installing Text Command Support")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#using-the-textcommandservice"},"Using the ",(0,r.kt)("inlineCode",{parentName:"a"},"TextCommandService"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#writing-commands"},"Writing Commands")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#the-command-context"},"The Command Context")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#arguments"},"Arguments"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#argument-parsers"},"Argument Parsers")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#manually-parsing-arguments"},"Manually Parsing Arguments")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#argument-validation"},"Argument Validation"))))))),(0,r.kt)("h2",{id:"installing-text-command-support"},"Installing Text Command Support"),(0,r.kt)("p",null,"Add text command support to your ",(0,r.kt)("inlineCode",{parentName:"p"},"HadesContainer"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import "reflect-metadata";\n\nimport { HadesContainer } from "hades";\nimport { TextCommandsInstaller } from "@hades-ts/text-commands";\n\nimport { BotService } from "./services/BotService";\n\nconst container = new HadesContainer({\n    installers: [\n        new TextCommandsInstaller(),\n    ],\n});\nconst bot = container.get(BotService);\nbot.login()\n')),(0,r.kt)("h2",{id:"using-the-textcommandservice"},"Using the ",(0,r.kt)("inlineCode",{parentName:"h2"},"TextCommandService")),(0,r.kt)("p",null,"Add the ",(0,r.kt)("inlineCode",{parentName:"p"},"TextCommandService")," as a dependency to your ",(0,r.kt)("inlineCode",{parentName:"p"},"BotService"),". "),(0,r.kt)("p",null,"Then dispatch ",(0,r.kt)("inlineCode",{parentName:"p"},"Message"),"s to it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { HadesBotService, singleton } from "hades";\n\n@singleton(BotService)\nexport class BotService extends HadesBotService {\n    @inject(TextCommandService)\n    commandService: TextCommandService\n\n    async onReady() {\n        console.log(`Logged in as ${this.client.user.username}.`);\n    }\n\n    async onMessage<T extends Message>(message: T) {\n        this.commandService.dispatch(message);\n    }\n}\n')),(0,r.kt)("h2",{id:"writing-commands"},"Writing Commands"),(0,r.kt)("p",null,"Commands are classes that extend the ",(0,r.kt)("inlineCode",{parentName:"p"},"TextCommand")," class from Hades. They also need\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"@command()")," decorator. Here's a ping command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { TextCommand, TextCommandContext, command, description } from "@hades-ts/text-commands";\n\n@command("ping")\n@description("Get roundtrip latency in seconds.")\nexport class PingCommand extends TextCommand {\n    execute() {\n        const then = this.msg.createdTimestamp;\n        const now = Date.now();\n        const delta = new Date(now - then);\n        const seconds = delta.getSeconds();\n        const milliseconds = delta.getMilliseconds();\n        const total = (seconds * 1000 + milliseconds) / 1000.0;\n        return this.reply(`Pong in ${total} seconds!`);\n    }\n}\n')),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"@command()")," decorator to specify the name of your command."),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"@description()")," decorator to provide a description of its purpose."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"execute()")," method will be called when your command is run."),(0,r.kt)("h2",{id:"the-command-context"},"The Command Context"),(0,r.kt)("p",null,"Every ",(0,r.kt)("inlineCode",{parentName:"p"},"TextCommand")," has a ",(0,r.kt)("inlineCode",{parentName:"p"},"context: TextCommandContext")," field."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"TextCommandContext")," has a number of useful attributes that commands may utilize:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"msg"),": The original Discord.js ",(0,r.kt)("inlineCode",{parentName:"li"},"Message")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"body"),": The entire text content of the message"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"command"),": The name of the command executed;"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"args"),": An array of the space-delimited words in the body (minus the command name)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"reader"),": A ",(0,r.kt)("inlineCode",{parentName:"li"},"discord-command-parser.MessageArgumentReader")," instance")),(0,r.kt)("p",null,"It also has a few handy methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"reply(content: any)"),": Send a message to the originating user"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"react(emoji: Emoji)"),": Add reacts to the original message")),(0,r.kt)("p",null,"The original Discord.js client can also be accessed via ",(0,r.kt)("inlineCode",{parentName:"p"},"msg.client")),(0,r.kt)("h2",{id:"arguments"},"Arguments"),(0,r.kt)("p",null,"Arguments can be added to ",(0,r.kt)("inlineCode",{parentName:"p"},"TextCommand")," classes as fields using the ",(0,r.kt)("inlineCode",{parentName:"p"},"@arg()")," decorator:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'@command("isUpper")\n@description("Check if a string is uppercase.")\nexport class IsUpper extends TextCommand {\n\n    @arg()\n    @description("String to check.")\n    input!: string;\n\n    async execute() {\n        const result =\n            this.input === this.input.toUpperCase()\n                ? "is"\n                : "is not"\n\n        return this.reply(\n            `${this.input} ${result} uppercase.`\n        );\n    }\n}\n')),(0,r.kt)("h3",{id:"argument-parsers"},"Argument Parsers"),(0,r.kt)("p",null,"Argument values can automatically be parsed into other types using the ",(0,r.kt)("inlineCode",{parentName:"p"},"@parser()")," decorator:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'@command("squared")\n@description("Get the square of a number.")\nexport class Squared extends TextCommand {\n\n    @arg()\n    @description("Number to square.")\n    @parser(IntegerParser)\n    input!: number\n\n    async execute() {\n        const square = this.input * this.input;\n        return this.reply(\n            `${this.input} squared is ${square}.`\n        );\n    }\n}\n')),(0,r.kt)("p",null,"If the argument cannot be parsed, a message will be sent to the user reporting the problem."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Built-in Parsers")),(0,r.kt)("p",null,"There are a number of built-in parsers available:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ChannelParser"),": a Discord channel"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ChannelIdParser"),": a Discord channel ID"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"FloatParser"),": a floating-point number"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GuildChannelParser"),": a Discord channel of the current Guild"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IntegerParser"),": a integer number"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"MemberParser"),": a User of the current Guild"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"RoleParser"),": a Role of the current Guild"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"RoleIdParser"),": the ID of a Role of the current Guild"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"String"),": any string, the default parser"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"User"),": a Discord user"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"UserId")," a Discord user ID")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Default Parsers")),(0,r.kt)("p",null,"By default, a number of field types have automatically associated parsers."),(0,r.kt)("p",null,"In the above example, Hades will observe the field's type is ",(0,r.kt)("inlineCode",{parentName:"p"},"number")," and automatically use the ",(0,r.kt)("inlineCode",{parentName:"p"},"IntegerParser"),". So the ",(0,r.kt)("inlineCode",{parentName:"p"},"@parser(IntegerParser)")," bit can be removed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'@command("squared")\n@description("Get the square of a number.")\nexport class Squared extends TextCommand {\n\n    @arg()\n    @description("Number to square.")\n    input!: number // automatically parsed with IntegerParser\n\n    async execute() {\n        const square = this.input * this.input;\n        return this.reply(\n            `${this.input} squared is ${square}.`\n        );\n    }\n}\n')),(0,r.kt)("p",null,"Here are the default type-parser associations:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"string")," => ",(0,r.kt)("inlineCode",{parentName:"li"},"StringParser")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"number")," => ",(0,r.kt)("inlineCode",{parentName:"li"},"IntegerParser")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Channel")," => ",(0,r.kt)("inlineCode",{parentName:"li"},"ChannelParser")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"User")," => ",(0,r.kt)("inlineCode",{parentName:"li"},"UserParser")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Role")," => ",(0,r.kt)("inlineCode",{parentName:"li"},"RoleParser")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GuildChannel")," => ",(0,r.kt)("inlineCode",{parentName:"li"},"GuildChannelParser")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GuildMember")," => ",(0,r.kt)("inlineCode",{parentName:"li"},"MemberParser"))),(0,r.kt)("p",null,"You can provider your own mapping by providing it to ",(0,r.kt)("inlineCode",{parentName:"p"},"TextCommandsInstaller"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"    const container = new HadesContainer({\n        installers: [\n            new TextCommandsInstaller(\n                [\n                    ...defaultMappedTypes,\n                    [Number, FloatParser],\n                ]\n            ),\n        ],\n    });\n")),(0,r.kt)("p",null,"Now the ",(0,r.kt)("inlineCode",{parentName:"p"},"Squared")," command above would only accept floating-point numbers."),(0,r.kt)("h3",{id:"manually-parsing-arguments"},"Manually Parsing Arguments"),(0,r.kt)("p",null,"You can manually parse arguments passed to your commands using the ",(0,r.kt)("inlineCode",{parentName:"p"},"CommandContext.reader")," attribute."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CommandContext.reader")," is a parser from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/campbellbrendene/discord-command-parser"},"discord-command-parser"),"."),(0,r.kt)("p",null,"This can parse arguments in a more structured way, including user and channel IDs."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"getString()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"getInt()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"getFloat()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"getRemaining()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"getUserID()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"getRoleID()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"getChannelID()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"seek(")," amount: number = 1 ",(0,r.kt)("strong",{parentName:"li"},")"),": Useful for skipping tokens")),(0,r.kt)("h3",{id:"argument-validation"},"Argument Validation"),(0,r.kt)("p",null,"Argument values can optionally have custom validation applied to them."),(0,r.kt)("p",null,"Building on the ",(0,r.kt)("inlineCode",{parentName:"p"},"Squared")," example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'@command("squared")\n@description("Get the square of a number.")\nexport class Squared extends TextCommand {\n\n    @arg()\n    @description("Number to square.")\n    input!: number // automatically parsed with IntegerParser\n\n    async execute() {\n        const square = this.input * this.input;\n        return this.reply(\n            `${this.input} squared is ${square}.`\n        );\n    }\n\n    @validate("input")\n    async mustBePositive() {\n        if (this.input < 0) {\n            throw new TextArgError("Value must be positive.")\n        }\n    }\n}\n')),(0,r.kt)("p",null,"If the user input fails validation, the error will be reported to the user."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Reusable Validators")),(0,r.kt)("p",null,"You can also implement ",(0,r.kt)("inlineCode",{parentName:"p"},"Validator")," subclasses for reusable validation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'\nclass PositiveNumber extends Validator {\n    public async validate(arg: TextArgumentInstaller, ctx: TextCommandContext, value: number) {\n        if (value < 0) {\n            throw new TextArgError(`${value} must be positive.`);\n        }\n    }\n}\n\n@command("squared")\n@description("Get the square of a number.")\nexport class Squared extends TextCommand {\n\n    @arg()\n    @description("Number to square.")\n    PositiveNumber.check()\n    input!: number // automatically parsed with IntegerParser\n\n    async execute() {\n        const square = this.input * this.input;\n        return this.reply(\n            `${this.input} squared is ${square}.`\n        );\n    }\n}\n')))}u.isMDXComponent=!0},4532:(e,n,t)=>{t(6393)}}]);