"use strict";(self.webpackChunk_hades_ts_docs=self.webpackChunk_hades_ts_docs||[]).push([[1531],{158:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var r=n(6393);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),u=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=u(n),c=a,k=m["".concat(o,".").concat(c)]||m[c]||d[c]||l;return n?r.createElement(k,i(i({ref:t},p),{},{components:n})):r.createElement(k,i({ref:t},p))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[m]="string"==typeof e?e:a,i[1]=s;for(var u=2;u<l;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9647:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var r=n(5442),a=(n(6393),n(158));n(6276);const l={},i="Argument Parsers",s={unversionedId:"text-commands/parsers",id:"text-commands/parsers",title:"Argument Parsers",description:"By default, arguments are provided as strings.",source:"@site/docs/libs/text-commands/parsers.md",sourceDirName:"text-commands",slug:"/text-commands/parsers",permalink:"/docs/libs/text-commands/parsers",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"libs",previous:{title:"Arguments",permalink:"/docs/libs/text-commands/arguments"},next:{title:"Argument Validation",permalink:"/docs/libs/text-commands/validation"}},o={},u=[{value:"Built-in Parsers",id:"built-in-parsers",level:2},{value:"Default Parsers",id:"default-parsers",level:2},{value:"Custom Parsers",id:"custom-parsers",level:2},{value:"Manually Parsing Arguments",id:"manually-parsing-arguments",level:2}],p={toc:u},m="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"argument-parsers"},"Argument Parsers"),(0,a.kt)("p",null,"By default, arguments are provided as strings."),(0,a.kt)("p",null,"Argument values can be automatically parsed into other types using the ",(0,a.kt)("inlineCode",{parentName:"p"},"@parser()")," decorator:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'@command("squared")\nexport class Squared extends TextCommand {\n  @arg()\n  @parser(IntegerParser)\n  input!: number;\n\n  async execute() {\n    const square = this.input * this.input;\n    return this.reply(`${this.input} squared is ${square}.`);\n  }\n}\n')),(0,a.kt)("p",null,"If the argument cannot be parsed, a message will be sent to the user reporting the problem."),(0,a.kt)("h2",{id:"built-in-parsers"},"Built-in Parsers"),(0,a.kt)("p",null,"There are a number of built-in parsers available:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ChannelParser"),": a Discord channel"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ChannelIdParser"),": a Discord channel ID"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"FloatParser"),": a floating-point number"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"GuildChannelParser"),": a Discord channel of the current Guild"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"IntegerParser"),": a integer number"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"MemberParser"),": a User of the current Guild"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"RoleParser"),": a Role of the current Guild"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"RoleIdParser"),": the ID of a Role of the current Guild"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"String"),": any string, the default parser"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"User"),": a Discord user"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"UserId")," a Discord user ID")),(0,a.kt)("h2",{id:"default-parsers"},"Default Parsers"),(0,a.kt)("p",null,"By default, a number of field types have automatically associated parsers."),(0,a.kt)("p",null,"In the above example, Hades will observe the field's type is ",(0,a.kt)("inlineCode",{parentName:"p"},"number")," and automatically use the ",(0,a.kt)("inlineCode",{parentName:"p"},"IntegerParser"),". So the ",(0,a.kt)("inlineCode",{parentName:"p"},"@parser(IntegerParser)")," bit can be removed:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'@command("squared")\nexport class Squared extends TextCommand {\n  @arg()\n  input!: number; // automatically parsed with IntegerParser\n\n  async execute() {\n    const square = this.input * this.input;\n    return this.reply(`${this.input} squared is ${square}.`);\n  }\n}\n')),(0,a.kt)("p",null,"Here are the default type-parser associations:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"string")," => ",(0,a.kt)("inlineCode",{parentName:"li"},"StringParser")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number")," => ",(0,a.kt)("inlineCode",{parentName:"li"},"IntegerParser")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Channel")," => ",(0,a.kt)("inlineCode",{parentName:"li"},"ChannelParser")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"User")," => ",(0,a.kt)("inlineCode",{parentName:"li"},"UserParser")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Role")," => ",(0,a.kt)("inlineCode",{parentName:"li"},"RoleParser")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"GuildChannel")," => ",(0,a.kt)("inlineCode",{parentName:"li"},"GuildChannelParser")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"GuildMember")," => ",(0,a.kt)("inlineCode",{parentName:"li"},"MemberParser"))),(0,a.kt)("p",null,"You can provide your own mapping by providing it to ",(0,a.kt)("inlineCode",{parentName:"p"},"TextCommandsInstaller"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const container = new HadesContainer({\n  installers: [\n    new TextCommandsInstaller([...defaultMappedTypes, [Number, FloatParser]]),\n  ],\n});\n")),(0,a.kt)("p",null,"Now the ",(0,a.kt)("inlineCode",{parentName:"p"},"Squared")," command above would only accept floating-point numbers."),(0,a.kt)("h2",{id:"custom-parsers"},"Custom Parsers"),(0,a.kt)("p",null,"You can also implement your own parsers by extending the ",(0,a.kt)("inlineCode",{parentName:"p"},"Parser")," class:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'@parser()\nexport class YoutubeVideo extends TextArgParser {\n  name = "youtube video";\n  description = "A YouTube Video";\n\n  async parse(arg: TextArgInstaller, context: TextCommandContext) {\n    const value = context.reader.getString();\n    const match = value.match(/^([\\w-]{11})(?:\\S+)?$/);\n    if (!match) {\n      throw new TextArgError("Invalid YouTube video ID.");\n    }\n    return new YoutubeVideo(match[1]);\n  }\n}\n')),(0,a.kt)("p",null,"If the argument cannot be parsed, a ",(0,a.kt)("inlineCode",{parentName:"p"},"TextArgError")," can be thrown."),(0,a.kt)("h2",{id:"manually-parsing-arguments"},"Manually Parsing Arguments"),(0,a.kt)("p",null,"Instead of using decorated fields, you can also manually parse arguments passed to your commands using the ",(0,a.kt)("inlineCode",{parentName:"p"},"CommandContext.reader")," attribute."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"CommandContext.reader")," is a parser from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/campbellbrendene/discord-command-parser"},"discord-command-parser"),"."),(0,a.kt)("p",null,"This can parse arguments in a more structured way, including user and channel IDs."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"getString()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"getInt()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"getFloat()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"getRemaining()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"getUserID()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"getRoleID()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"getChannelID()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"seek(")," amount: number = 1 ",(0,a.kt)("strong",{parentName:"li"},")"),": Useful for skipping tokens")))}d.isMDXComponent=!0},6276:(e,t,n)=>{n(6393)}}]);