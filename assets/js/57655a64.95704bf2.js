"use strict";(self.webpackChunk_hades_ts_docs=self.webpackChunk_hades_ts_docs||[]).push([[2628],{3917:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"slash-commands/validation","title":"Argument Validation","description":"Arguments values can be validated by placing the @validate() decorator on a method:","source":"@site/docs/libs/slash-commands/validation.md","sourceDirName":"slash-commands","slug":"/slash-commands/validation","permalink":"/docs/libs/slash-commands/validation","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"libs","previous":{"title":"Argument Parsers","permalink":"/docs/libs/slash-commands/parsers"},"next":{"title":"Text Commands","permalink":"/docs/libs/text-commands/"}}');var s=t(5723),r=t(4987);const i={},o="Argument Validation",l={},d=[{value:"Reusable Validators",id:"reusable-validators",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"argument-validation",children:"Argument Validation"})}),"\n",(0,s.jsxs)(n.p,{children:["Arguments values can be validated by placing the ",(0,s.jsx)(n.code,{children:"@validate()"})," decorator on a method:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'@command("factorial")\nexport class Factorial extends SlashCommand {\n  @arg()\n  input!: number;\n\n  @validate("input")\n  mustBePositive() {\n    if (this.input < 0) {\n      throw new SlashArgError("Input must be positive.");\n    }\n  }\n\n  async execute() {\n    const factorial = factorial(this.input);\n    return this.reply(`${this.input}! = ${factorial}.`);\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In this case, the ",(0,s.jsx)(n.code,{children:"mustBePositive"})," method will be called before the command is executed. If it throws an error, the error will be reported to the user."]}),"\n",(0,s.jsx)(n.h2,{id:"reusable-validators",children:"Reusable Validators"}),"\n",(0,s.jsxs)(n.p,{children:["You can also implement ",(0,s.jsx)(n.code,{children:"Validator"})," subclasses for reusable validation:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'export class NotMeValidator extends Validator {\n  @inject(HadesClient)\n  client: HadesClient;\n\n  async validate(\n    arg: SlashArgInstaller,\n    ctx: BaseCommandInteraction,\n    member: GuildMember,\n  ) {\n    if (member.id === this.client.user.id) {\n      throw new SlashArgError("You can\'t use this command on me.");\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"NotMeValidator"})," checks that an argument parsed as a ",(0,s.jsx)(n.code,{children:"GuildMember"})," is not the bot itself. It can be used like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'@command("not-me")\nexport class NotMeCommand extends TextCommand {\n  @arg()\n  @parser(MemberParser)\n  @NotMeValidator.check()\n  user!: GuildMember;\n\n  async execute() {\n    await this.reply(`You used the command on ${this.user.tag}.`);\n  }\n}\n'})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},4987:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(2155);const s={},r=a.createContext(s);function i(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);