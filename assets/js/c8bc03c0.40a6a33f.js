"use strict";(self.webpackChunk_hades_ts_docs=self.webpackChunk_hades_ts_docs||[]).push([[1501],{2103:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"slash-commands/parsers","title":"Argument Parsers","description":"By default, arguments are provided as strings.","source":"@site/docs/libs/slash-commands/parsers.md","sourceDirName":"slash-commands","slug":"/slash-commands/parsers","permalink":"/docs/libs/slash-commands/parsers","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"libs","previous":{"title":"Arguments","permalink":"/docs/libs/slash-commands/arguments"},"next":{"title":"Argument Validation","permalink":"/docs/libs/slash-commands/validation"}}');var a=n(5723),t=n(4987);const i={},l="Argument Parsers",d={},c=[{value:"Built-in Parsers",id:"built-in-parsers",level:2},{value:"Default Parsers",id:"default-parsers",level:2},{value:"Custom Parsers",id:"custom-parsers",level:2}];function o(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.header,{children:(0,a.jsx)(s.h1,{id:"argument-parsers",children:"Argument Parsers"})}),"\n",(0,a.jsx)(s.p,{children:"By default, arguments are provided as strings."}),"\n",(0,a.jsxs)(s.p,{children:["Argument values can be automatically parsed into other types using the ",(0,a.jsx)(s.code,{children:"@parser()"})," decorator:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-ts",children:'@command("squared")\nexport class Squared extends SlashCommand {\n  @arg()\n  @parser(IntegerParser)\n  input!: number;\n\n  async execute() {\n    const square = this.input * this.input;\n    return this.reply(`${this.input} squared is ${square}.`);\n  }\n}\n'})}),"\n",(0,a.jsx)(s.p,{children:"If the argument cannot be parsed, a message will be sent to the user reporting the problem."}),"\n",(0,a.jsx)(s.h2,{id:"built-in-parsers",children:"Built-in Parsers"}),"\n",(0,a.jsx)(s.p,{children:"There are a number of built-in parsers available:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"ChannelParser"}),": a Discord channel"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"MemberParser"}),": a User of the current Guild"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"RoleParser"}),": a Role of the current Guild"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"String"}),": any string, the default parser"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"User"}),": a Discord user"]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"default-parsers",children:"Default Parsers"}),"\n",(0,a.jsx)(s.p,{children:"By default, a number of field types have automatically associated parsers."}),"\n",(0,a.jsxs)(s.p,{children:["In the above example, Hades will observe the field's type is ",(0,a.jsx)(s.code,{children:"number"})," and automatically use the ",(0,a.jsx)(s.code,{children:"IntegerParser"}),". So the ",(0,a.jsx)(s.code,{children:"@parser(IntegerParser)"})," bit can be removed:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-ts",children:'@command("squared")\nexport class Squared extends TextCommand {\n  @arg()\n  input!: number; // automatically parsed with IntegerParser\n\n  async execute() {\n    const square = this.input * this.input;\n    return this.reply(`${this.input} squared is ${square}.`);\n  }\n}\n'})}),"\n",(0,a.jsx)(s.p,{children:"Here are the default type-parser associations:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"string"})," => ",(0,a.jsx)(s.code,{children:"StringParser"})]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"User"})," => ",(0,a.jsx)(s.code,{children:"UserParser"})]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"Role"})," => ",(0,a.jsx)(s.code,{children:"RoleParser"})]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"GuildChannel"})," => ",(0,a.jsx)(s.code,{children:"GuildChannelParser"})]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"GuildMember"})," => ",(0,a.jsx)(s.code,{children:"MemberParser"})]}),"\n"]}),"\n",(0,a.jsxs)(s.p,{children:["You can provide your own mapping by providing it to ",(0,a.jsx)(s.code,{children:"SlashCommandsInstaller"}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-ts",children:"const container = new HadesContainer({\n  installers: [\n    new SlashCommandsInstaller([...defaultMappedTypes, [Number, FloatParser]]),\n  ],\n});\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Now the ",(0,a.jsx)(s.code,{children:"Squared"})," command above would only accept floating-point numbers."]}),"\n",(0,a.jsx)(s.h2,{id:"custom-parsers",children:"Custom Parsers"}),"\n",(0,a.jsxs)(s.p,{children:["You can also implement your own parsers by extending the ",(0,a.jsx)(s.code,{children:"Parser"})," class:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-ts",children:'@parser()\nexport class YoutubeVideo extends SlashArgParser {\n  name = "youtube video";\n  description = "A YouTube Video";\n\n  async parse(arg: SlashArgInstaller, interaction: BaseCommandInteraction) {\n    const value = interaction.options.getString(arg.name);\n    const match = value.match(/^([\\w-]{11})(?:\\S+)?$/);\n    if (!match) {\n      throw new SlashArgError("Invalid YouTube video ID.");\n    }\n    return new YoutubeVideo(match[1]);\n  }\n}\n'})}),"\n",(0,a.jsxs)(s.p,{children:["If the argument cannot be parsed, a ",(0,a.jsx)(s.code,{children:"SlashArgError"})," can be thrown."]})]})}function u(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}},4987:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>l});var r=n(2155);const a={},t=r.createContext(a);function i(e){const s=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);