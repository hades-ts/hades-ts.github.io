"use strict";(self.webpackChunk_hades_ts_docs=self.webpackChunk_hades_ts_docs||[]).push([[8322],{158:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>k});var r=t(6393);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),u=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(o.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=u(t),c=a,k=m["".concat(o,".").concat(c)]||m[c]||d[c]||l;return t?r.createElement(k,i(i({ref:n},p),{},{components:t})):r.createElement(k,i({ref:n},p))}));function k(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=c;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[m]="string"==typeof e?e:a,i[1]=s;for(var u=2;u<l;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},4910:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var r=t(5442),a=(t(6393),t(158));t(4532);const l={},i="Argument Parsers",s={unversionedId:"parsers",id:"parsers",title:"Argument Parsers",description:"By default, arguments are provided as strings.",source:"@site/docs/text-commands/parsers.md",sourceDirName:".",slug:"/parsers",permalink:"/docs/text-commands/parsers",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"text-commands",previous:{title:"Arguments",permalink:"/docs/text-commands/arguments"},next:{title:"Argument Validation",permalink:"/docs/text-commands/validation"}},o={},u=[{value:"Built-in Parsers",id:"built-in-parsers",level:2},{value:"Default Parsers",id:"default-parsers",level:2},{value:"Custom Parsers",id:"custom-parsers",level:2},{value:"Manually Parsing Arguments",id:"manually-parsing-arguments",level:2}],p={toc:u};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"argument-parsers"},"Argument Parsers"),(0,a.kt)("p",null,"By default, arguments are provided as strings."),(0,a.kt)("p",null,"Argument values can be automatically parsed into other types using the ",(0,a.kt)("inlineCode",{parentName:"p"},"@parser()")," decorator:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"@command('squared')\nexport class Squared extends TextCommand {\n\n    @arg()\n    @parser(IntegerParser)\n    input!: number\n\n    async execute() {\n        const square = this.input * this.input;\n        return this.reply(\n            `${this.input} squared is ${square}.`\n        );\n    }\n}\n")),(0,a.kt)("p",null,"If the argument cannot be parsed, a message will be sent to the user reporting the problem."),(0,a.kt)("h2",{id:"built-in-parsers"},"Built-in Parsers"),(0,a.kt)("p",null,"There are a number of built-in parsers available:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ChannelParser"),": a Discord channel"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ChannelIdParser"),": a Discord channel ID"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"FloatParser"),": a floating-point number"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"GuildChannelParser"),": a Discord channel of the current Guild"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"IntegerParser"),": a integer number"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"MemberParser"),": a User of the current Guild"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"RoleParser"),": a Role of the current Guild"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"RoleIdParser"),": the ID of a Role of the current Guild"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"String"),": any string, the default parser"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"User"),": a Discord user"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"UserId")," a Discord user ID")),(0,a.kt)("h2",{id:"default-parsers"},"Default Parsers"),(0,a.kt)("p",null,"By default, a number of field types have automatically associated parsers."),(0,a.kt)("p",null,"In the above example, Hades will observe the field's type is ",(0,a.kt)("inlineCode",{parentName:"p"},"number")," and automatically use the ",(0,a.kt)("inlineCode",{parentName:"p"},"IntegerParser"),". So the ",(0,a.kt)("inlineCode",{parentName:"p"},"@parser(IntegerParser)")," bit can be removed:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'@command("squared")\nexport class Squared extends TextCommand {\n\n    @arg()\n    input!: number // automatically parsed with IntegerParser\n\n    async execute() {\n        const square = this.input * this.input;\n        return this.reply(\n            `${this.input} squared is ${square}.`\n        );\n    }\n}\n')),(0,a.kt)("p",null,"Here are the default type-parser associations:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"string")," => ",(0,a.kt)("inlineCode",{parentName:"li"},"StringParser")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"number")," => ",(0,a.kt)("inlineCode",{parentName:"li"},"IntegerParser")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Channel")," => ",(0,a.kt)("inlineCode",{parentName:"li"},"ChannelParser")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"User")," => ",(0,a.kt)("inlineCode",{parentName:"li"},"UserParser")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Role")," => ",(0,a.kt)("inlineCode",{parentName:"li"},"RoleParser")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"GuildChannel")," => ",(0,a.kt)("inlineCode",{parentName:"li"},"GuildChannelParser")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"GuildMember")," => ",(0,a.kt)("inlineCode",{parentName:"li"},"MemberParser"))),(0,a.kt)("p",null,"You can provide your own mapping by providing it to ",(0,a.kt)("inlineCode",{parentName:"p"},"TextCommandsInstaller"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const container = new HadesContainer({\n    installers: [\n        new TextCommandsInstaller(\n            [\n                ...defaultMappedTypes,\n                [Number, FloatParser],\n            ]\n        ),\n    ],\n});\n")),(0,a.kt)("p",null,"Now the ",(0,a.kt)("inlineCode",{parentName:"p"},"Squared")," command above would only accept floating-point numbers."),(0,a.kt)("h2",{id:"custom-parsers"},"Custom Parsers"),(0,a.kt)("p",null,"You can also implement your own parsers by extending the ",(0,a.kt)("inlineCode",{parentName:"p"},"Parser")," class:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"@parser()\nexport class YoutubeVideo extends TextArgParser {\n    name = 'youtube video'\n    description = 'A YouTube Video'\n\n    async parse(arg: TextArgInstaller, context: TextCommandContext) {\n        const value = context.reader.getString()\n        const match = value.match(/^([\\w-]{11})(?:\\S+)?$/)\n        if (!match) {\n            throw new TextArgError('Invalid YouTube video ID.')\n        }\n        return new YoutubeVideo(match[1])\n    }\n}\n")),(0,a.kt)("p",null,"If the argument cannot be parsed, a ",(0,a.kt)("inlineCode",{parentName:"p"},"TextArgError"),"  can be thrown."),(0,a.kt)("h2",{id:"manually-parsing-arguments"},"Manually Parsing Arguments"),(0,a.kt)("p",null,"Instead of using decorated fields, you can also manually parse arguments passed to your commands using the ",(0,a.kt)("inlineCode",{parentName:"p"},"CommandContext.reader")," attribute."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"CommandContext.reader")," is a parser from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/campbellbrendene/discord-command-parser"},"discord-command-parser"),"."),(0,a.kt)("p",null,"This can parse arguments in a more structured way, including user and channel IDs."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"getString()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"getInt()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"getFloat()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"getRemaining()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"getUserID()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"getRoleID()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"getChannelID()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"seek(")," amount: number = 1 ",(0,a.kt)("strong",{parentName:"li"},")"),": Useful for skipping tokens")))}m.isMDXComponent=!0},4532:(e,n,t)=>{t(6393)}}]);