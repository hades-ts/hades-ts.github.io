"use strict";(self.webpackChunk_hades_ts_docs=self.webpackChunk_hades_ts_docs||[]).push([[830],{4610:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>l});var s=r(538);const a={},t=s.createContext(a);function i(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(t.Provider,{value:n},e.children)}},5149:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"text-commands/parsers","title":"Argument Parsers","description":"By default, arguments are provided as strings.","source":"@site/docs/libs/text-commands/parsers.md","sourceDirName":"text-commands","slug":"/text-commands/parsers","permalink":"/docs/libs/text-commands/parsers","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"libs","previous":{"title":"Arguments","permalink":"/docs/libs/text-commands/arguments"},"next":{"title":"Argument Validation","permalink":"/docs/libs/text-commands/validation"}}');var a=r(7282),t=r(4610);const i={},l="Argument Parsers",d={},c=[{value:"Built-in Parsers",id:"built-in-parsers",level:2},{value:"Default Parsers",id:"default-parsers",level:2},{value:"Custom Parsers",id:"custom-parsers",level:2},{value:"Manually Parsing Arguments",id:"manually-parsing-arguments",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"argument-parsers",children:"Argument Parsers"})}),"\n",(0,a.jsx)(n.p,{children:"By default, arguments are provided as strings."}),"\n",(0,a.jsxs)(n.p,{children:["Argument values can be automatically parsed into other types using the ",(0,a.jsx)(n.code,{children:"@parser()"})," decorator:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'@command("squared")\nexport class Squared extends TextCommand {\n  @arg()\n  @parser(IntegerParser)\n  input!: number;\n\n  async execute() {\n    const square = this.input * this.input;\n    return this.reply(`${this.input} squared is ${square}.`);\n  }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"If the argument cannot be parsed, a message will be sent to the user reporting the problem."}),"\n",(0,a.jsx)(n.h2,{id:"built-in-parsers",children:"Built-in Parsers"}),"\n",(0,a.jsx)(n.p,{children:"There are a number of built-in parsers available:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"ChannelParser"}),": a Discord channel"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"ChannelIdParser"}),": a Discord channel ID"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"FloatParser"}),": a floating-point number"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"GuildChannelParser"}),": a Discord channel of the current Guild"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"IntegerParser"}),": a integer number"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"MemberParser"}),": a User of the current Guild"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"RoleParser"}),": a Role of the current Guild"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"RoleIdParser"}),": the ID of a Role of the current Guild"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"String"}),": any string, the default parser"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"User"}),": a Discord user"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"UserId"})," a Discord user ID"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"default-parsers",children:"Default Parsers"}),"\n",(0,a.jsx)(n.p,{children:"By default, a number of field types have automatically associated parsers."}),"\n",(0,a.jsxs)(n.p,{children:["In the above example, Hades will observe the field's type is ",(0,a.jsx)(n.code,{children:"number"})," and automatically use the ",(0,a.jsx)(n.code,{children:"IntegerParser"}),". So the ",(0,a.jsx)(n.code,{children:"@parser(IntegerParser)"})," bit can be removed:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'@command("squared")\nexport class Squared extends TextCommand {\n  @arg()\n  input!: number; // automatically parsed with IntegerParser\n\n  async execute() {\n    const square = this.input * this.input;\n    return this.reply(`${this.input} squared is ${square}.`);\n  }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Here are the default type-parser associations:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"string"})," => ",(0,a.jsx)(n.code,{children:"StringParser"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"number"})," => ",(0,a.jsx)(n.code,{children:"IntegerParser"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Channel"})," => ",(0,a.jsx)(n.code,{children:"ChannelParser"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"User"})," => ",(0,a.jsx)(n.code,{children:"UserParser"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Role"})," => ",(0,a.jsx)(n.code,{children:"RoleParser"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"GuildChannel"})," => ",(0,a.jsx)(n.code,{children:"GuildChannelParser"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"GuildMember"})," => ",(0,a.jsx)(n.code,{children:"MemberParser"})]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["You can provide your own mapping by providing it to ",(0,a.jsx)(n.code,{children:"TextCommandsInstaller"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"const container = new HadesContainer({\n  installers: [\n    new TextCommandsInstaller([...defaultMappedTypes, [Number, FloatParser]]),\n  ],\n});\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Now the ",(0,a.jsx)(n.code,{children:"Squared"})," command above would only accept floating-point numbers."]}),"\n",(0,a.jsx)(n.h2,{id:"custom-parsers",children:"Custom Parsers"}),"\n",(0,a.jsxs)(n.p,{children:["You can also implement your own parsers by extending the ",(0,a.jsx)(n.code,{children:"Parser"})," class:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'@parser()\nexport class YoutubeVideo extends TextArgParser {\n  name = "youtube video";\n  description = "A YouTube Video";\n\n  async parse(arg: TextArgInstaller, context: TextCommandContext) {\n    const value = context.reader.getString();\n    const match = value.match(/^([\\w-]{11})(?:\\S+)?$/);\n    if (!match) {\n      throw new TextArgError("Invalid YouTube video ID.");\n    }\n    return new YoutubeVideo(match[1]);\n  }\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["If the argument cannot be parsed, a ",(0,a.jsx)(n.code,{children:"TextArgError"})," can be thrown."]}),"\n",(0,a.jsx)(n.h2,{id:"manually-parsing-arguments",children:"Manually Parsing Arguments"}),"\n",(0,a.jsxs)(n.p,{children:["Instead of using decorated fields, you can also manually parse arguments passed to your commands using the ",(0,a.jsx)(n.code,{children:"CommandContext.reader"})," attribute."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"CommandContext.reader"})," is a parser from ",(0,a.jsx)(n.a,{href:"https://github.com/campbellbrendene/discord-command-parser",children:"discord-command-parser"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"This can parse arguments in a more structured way, including user and channel IDs."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"getString()"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"getInt()"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"getFloat()"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"getRemaining()"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"getUserID()"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"getRoleID()"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"getChannelID()"})}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"seek("})," amount: number = 1 ",(0,a.jsx)(n.strong,{children:")"}),": Useful for skipping tokens"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}}}]);