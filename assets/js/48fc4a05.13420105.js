"use strict";(self.webpackChunk_hades_ts_docs=self.webpackChunk_hades_ts_docs||[]).push([[8177],{158:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>k});var t=r(6393);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=t.createContext({}),u=function(e){var n=t.useContext(o),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},p=function(e){var n=u(e.components);return t.createElement(o.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=u(r),d=a,k=m["".concat(o,".").concat(d)]||m[d]||c[d]||s;return r?t.createElement(k,l(l({ref:n},p),{},{components:r})):t.createElement(k,l({ref:n},p))}));function k(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=r.length,l=new Array(s);l[0]=d;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i[m]="string"==typeof e?e:a,l[1]=i;for(var u=2;u<s;u++)l[u]=r[u];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},445:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var t=r(5442),a=(r(6393),r(158));r(4532);const s={},l="Argument Parsers",i={unversionedId:"parsers",id:"parsers",title:"Argument Parsers",description:"By default, arguments are provided as strings.",source:"@site/docs/slash-commands/parsers.md",sourceDirName:".",slug:"/parsers",permalink:"/docs/slash-commands/parsers",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"slash-commands",previous:{title:"Arguments",permalink:"/docs/slash-commands/arguments"},next:{title:"Argument Validation",permalink:"/docs/slash-commands/validation"}},o={},u=[{value:"Built-in Parsers",id:"built-in-parsers",level:2},{value:"Default Parsers",id:"default-parsers",level:2},{value:"Custom Parsers",id:"custom-parsers",level:2}],p={toc:u};function m(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"argument-parsers"},"Argument Parsers"),(0,a.kt)("p",null,"By default, arguments are provided as strings."),(0,a.kt)("p",null,"Argument values can be automatically parsed into other types using the ",(0,a.kt)("inlineCode",{parentName:"p"},"@parser()")," decorator:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"@command('squared')\nexport class Squared extends SlashCommand {\n\n    @arg()\n    @parser(IntegerParser)\n    input!: number\n\n    async execute() {\n        const square = this.input * this.input;\n        return this.reply(\n            `${this.input} squared is ${square}.`\n        );\n    }\n}\n")),(0,a.kt)("p",null,"If the argument cannot be parsed, a message will be sent to the user reporting the problem."),(0,a.kt)("h2",{id:"built-in-parsers"},"Built-in Parsers"),(0,a.kt)("p",null,"There are a number of built-in parsers available:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ChannelParser"),": a Discord channel"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"MemberParser"),": a User of the current Guild"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"RoleParser"),": a Role of the current Guild"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"String"),": any string, the default parser"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"User"),": a Discord user")),(0,a.kt)("h2",{id:"default-parsers"},"Default Parsers"),(0,a.kt)("p",null,"By default, a number of field types have automatically associated parsers."),(0,a.kt)("p",null,"In the above example, Hades will observe the field's type is ",(0,a.kt)("inlineCode",{parentName:"p"},"number")," and automatically use the ",(0,a.kt)("inlineCode",{parentName:"p"},"IntegerParser"),". So the ",(0,a.kt)("inlineCode",{parentName:"p"},"@parser(IntegerParser)")," bit can be removed:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'@command("squared")\nexport class Squared extends TextCommand {\n\n    @arg()\n    input!: number // automatically parsed with IntegerParser\n\n    async execute() {\n        const square = this.input * this.input;\n        return this.reply(\n            `${this.input} squared is ${square}.`\n        );\n    }\n}\n')),(0,a.kt)("p",null,"Here are the default type-parser associations:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"string")," => ",(0,a.kt)("inlineCode",{parentName:"li"},"StringParser")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"User")," => ",(0,a.kt)("inlineCode",{parentName:"li"},"UserParser")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Role")," => ",(0,a.kt)("inlineCode",{parentName:"li"},"RoleParser")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"GuildChannel")," => ",(0,a.kt)("inlineCode",{parentName:"li"},"GuildChannelParser")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"GuildMember")," => ",(0,a.kt)("inlineCode",{parentName:"li"},"MemberParser"))),(0,a.kt)("p",null,"You can provide your own mapping by providing it to ",(0,a.kt)("inlineCode",{parentName:"p"},"SlashCommandsInstaller"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const container = new HadesContainer({\n    installers: [\n        new SlashCommandsInstaller(\n            [\n                ...defaultMappedTypes,\n                [Number, FloatParser],\n            ]\n        ),\n    ],\n});\n")),(0,a.kt)("p",null,"Now the ",(0,a.kt)("inlineCode",{parentName:"p"},"Squared")," command above would only accept floating-point numbers."),(0,a.kt)("h2",{id:"custom-parsers"},"Custom Parsers"),(0,a.kt)("p",null,"You can also implement your own parsers by extending the ",(0,a.kt)("inlineCode",{parentName:"p"},"Parser")," class:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"@parser()\nexport class YoutubeVideo extends SlashArgParser {\n    name = 'youtube video'\n    description = 'A YouTube Video'\n\n    async parse(\n        arg: SlashArgInstaller, \n        interaction: BaseCommandInteraction\n    ) {\n        const value = interaction.options.getString(arg.name)\n        const match = value.match(/^([\\w-]{11})(?:\\S+)?$/)\n        if (!match) {\n            throw new SlashArgError('Invalid YouTube video ID.')\n        }\n        return new YoutubeVideo(match[1])\n    }\n}\n")),(0,a.kt)("p",null,"If the argument cannot be parsed, a ",(0,a.kt)("inlineCode",{parentName:"p"},"SlashArgError"),"  can be thrown."))}m.isMDXComponent=!0},4532:(e,n,r)=>{r(6393)}}]);