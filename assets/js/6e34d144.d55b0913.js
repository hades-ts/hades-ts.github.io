"use strict";(self.webpackChunk_hades_ts_docs=self.webpackChunk_hades_ts_docs||[]).push([[4038],{158:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(6393);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),g=a,m=d["".concat(l,".").concat(g)]||d[g]||u[g]||i;return t?r.createElement(m,o(o({ref:n},p),{},{components:t})):r.createElement(m,o({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=g;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},5257:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=t(5442),a=(t(6393),t(158));t(6276);const i={},o="HadesContainer",s={unversionedId:"hades-container",id:"hades-container",title:"HadesContainer",description:"HadesContainer is where we tell Hades about the services that make up our bot.",source:"@site/docs/hades/hades-container.md",sourceDirName:".",slug:"/hades-container",permalink:"/docs/hades/hades-container",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"hades",previous:{title:"Getting Started",permalink:"/docs/hades/getting-started"},next:{title:"HadesBotService",permalink:"/docs/hades/bot-service"}},l={},c=[{value:"Binding Services",id:"binding-services",level:2},{value:"Installers",id:"installers",level:3},{value:"Installer Functions",id:"installer-functions",level:4},{value:"Resolving Services",id:"resolving-services",level:2},{value:"Injecting Services",id:"injecting-services",level:2}],p={toc:c},d="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"hadescontainer"},"HadesContainer"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"HadesContainer")," is where we tell Hades about the services that make up our bot."),(0,a.kt)("p",null,"It is a wrapper around ",(0,a.kt)("a",{parentName:"p",href:"https://inversify.io/"},"Inversify.js")," and exposes largely the same API."),(0,a.kt)("p",null,"To learn more about dependency injection, check out our guides:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/guides/solid-code"},"Writing SOLID Code")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/guides/di"},"Dependency Injection"))),(0,a.kt)("h2",{id:"binding-services"},"Binding Services"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"HadesContainer")," exposes the ",(0,a.kt)("inlineCode",{parentName:"p"},"bind()")," method which is used to bind services to the container."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// src/index.ts\nconst container = new HadesContainer();\ncontainer.bind(ILogger).to(ConsoleLogger);\n")),(0,a.kt)("p",null,"In this case, we told the container that when we request ",(0,a.kt)("inlineCode",{parentName:"p"},"ILogger"),", we want to get an instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsoleLogger"),"."),(0,a.kt)("h3",{id:"installers"},"Installers"),(0,a.kt)("p",null,"The constructor for ",(0,a.kt)("inlineCode",{parentName:"p"},"HadesContainer")," accepts an Inversify ",(0,a.kt)("inlineCode",{parentName:"p"},"interfaces.ContainerOptions")," object which can be used to configure the container."),(0,a.kt)("p",null,"Hades adds an additional option called ",(0,a.kt)("inlineCode",{parentName:"p"},"installers")," which is an array of ",(0,a.kt)("inlineCode",{parentName:"p"},"Installer")," instances."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Installer")," interface exposes a single method called ",(0,a.kt)("inlineCode",{parentName:"p"},"install()")," which is called when the container is configured."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// src/LoggerInstaller.ts\nexport class LoggerInstaller implements Installer {\n  install(container: Container) {\n    container.bind(ILogger).to(ConsoleLogger);\n  }\n}\n")),(0,a.kt)("p",null,"This can then be passed to the ",(0,a.kt)("inlineCode",{parentName:"p"},"HadesContainer")," constructor."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const container = new HadesContainer({\n  installers: [new LoggerInstaller()],\n});\n")),(0,a.kt)("h4",{id:"installer-functions"},"Installer Functions"),(0,a.kt)("p",null,"If your installer is simple, you can also pass a function to the ",(0,a.kt)("inlineCode",{parentName:"p"},"installers")," array."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const container = new HadesContainer({\n  installers: [(container) => container.bind(ILogger).to(ConsoleLogger)],\n});\n")),(0,a.kt)("h2",{id:"resolving-services"},"Resolving Services"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"HadesContainer")," exposes the ",(0,a.kt)("inlineCode",{parentName:"p"},"get()")," method which is used to resolve services from the container."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const logger = container.get(ILogger);\n")),(0,a.kt)("p",null,"In this case, we requested an instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"ILogger")," from the container and got an instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsoleLogger"),". This is because we bound ",(0,a.kt)("inlineCode",{parentName:"p"},"ILogger")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsoleLogger")," earlier."),(0,a.kt)("h2",{id:"injecting-services"},"Injecting Services"),(0,a.kt)("p",null,"Services can depend on other services by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"@inject()")," decorator."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// src/services/SomeService.ts\n@injectable()\nexport class SomeService {\n  @inject(ILogger)\n  log: ILogger;\n\n  doSomething() {\n    this.log.info("Did something!");\n  }\n}\n')),(0,a.kt)("p",null,"In this case, ",(0,a.kt)("inlineCode",{parentName:"p"},"SomeService")," depends on ",(0,a.kt)("inlineCode",{parentName:"p"},"ILogger"),"."),(0,a.kt)("p",null,"Since we bound ",(0,a.kt)("inlineCode",{parentName:"p"},"ILogger")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsoleLogger"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"SomeService")," will get an instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsoleLogger")," when it is resolved from the container."))}u.isMDXComponent=!0},6276:(e,n,t)=>{t(6393)}}]);