"use strict";(self.webpackChunk_hades_ts_docs=self.webpackChunk_hades_ts_docs||[]).push([[8568],{158:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var a=n(6393);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=c(n),p=r,f=m["".concat(l,".").concat(p)]||m[p]||u[p]||o;return n?a.createElement(f,i(i({ref:t},d),{},{components:n})):a.createElement(f,i({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3852:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(5442),r=(n(6393),n(158));n(4532);const o={},i="Argument Validation",s={unversionedId:"slash-commands/validation",id:"slash-commands/validation",title:"Argument Validation",description:"Arguments values can be validated by placing the @validate() decorator on a method:",source:"@site/docs/libs/slash-commands/validation.md",sourceDirName:"slash-commands",slug:"/slash-commands/validation",permalink:"/docs/libs/slash-commands/validation",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"libs",previous:{title:"Argument Parsers",permalink:"/docs/libs/slash-commands/parsers"},next:{title:"Text Commands",permalink:"/docs/libs/text-commands/"}},l={},c=[{value:"Reusable Validators",id:"reusable-validators",level:2}],d={toc:c};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"argument-validation"},"Argument Validation"),(0,r.kt)("p",null,"Arguments values can be validated by placing the ",(0,r.kt)("inlineCode",{parentName:"p"},"@validate()")," decorator on a method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"@command('factorial')\nexport class Factorial extends SlashCommand {\n\n    @arg()\n    input!: number\n\n    @validate('input')\n    mustBePositive() {\n        if (this.input < 0) {\n            throw new SlashArgError('Input must be positive.')\n        }\n    }\n\n    async execute() {\n        const factorial = factorial(this.input);\n        return this.reply(\n            `${this.input}! = ${factorial}.`\n        );\n    }\n}\n")),(0,r.kt)("p",null,"In this case, the ",(0,r.kt)("inlineCode",{parentName:"p"},"mustBePositive")," method will be called before the command is executed. If it throws an error, the error will be reported to the user."),(0,r.kt)("h2",{id:"reusable-validators"},"Reusable Validators"),(0,r.kt)("p",null,"You can also implement ",(0,r.kt)("inlineCode",{parentName:"p"},"Validator")," subclasses for reusable validation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'export class NotMeValidator extends Validator {\n\n    @inject(HadesClient)\n    client: HadesClient;\n\n    async validate(\n        arg: SlashArgInstaller, \n        ctx: BaseCommandInteraction,\n        member: GuildMember\n    ) {\n        if (member.id === this.client.user.id) {\n            throw new SlashArgError(\n                "You can\'t use this command on me."\n            );\n        }\n    }\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"NotMeValidator")," checks that an argument parsed as a ",(0,r.kt)("inlineCode",{parentName:"p"},"GuildMember")," is not the bot itself. It can be used like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"@command('not-me')\nexport class NotMeCommand extends TextCommand {\n\n    @arg()\n    @parser(MemberParser)\n    @NotMeValidator.check()\n    user!: GuildMember\n\n    async execute() {\n        await this.reply(`You used the command on ${this.user.tag}.`)\n    }\n}\n")))}m.isMDXComponent=!0},4532:(e,t,n)=>{n(6393)}}]);